import pandas as pd
from pprint import pprint
from sklearn.feature_selection import mutual_info_classif 

def id3(df, target_attribute, attribute_names, default_class=None):
    from collections import Counter
    cnt = Counter(x for x in df[target_attribute])
    if len(cnt) == 1:
        return next(iter(cnt))


    elif df.empty or (not attribute_names):
        return default_class


    else:
        gainz = mutual_info_classif(df[attribute_names], df[target_attribute], discrete_features=True)
        index_of_max = gainz.tolist().index(max(gainz))
        best_attr = attribute_names[index_of_max]
        tree = {best_attr: {}}
        remaining_attribute_names = [i for i in attribute_names if i != best_attr]
        for attr_val, data_subset in df.groupby(best_attr):
            subtree = id3(data_subset, target_attribute, remaining_attribute_names, default_class)

            tree[best_attr][attr_val] = subtree
        return tree


df = pd.read_csv("Playtennis.csv")
attribute_names = df.columns.tolist()
print("List of attribut name")
attribute_names.remove("PlayTennis")
for colname in df.select_dtypes("object"):
    df[colname], _ = df[colname].factorize()
print(df)
tree = id3(df, "PlayTennis", attribute_names)
print("The tree structure")
pprint(tree)






import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.neighbors import KNeighborsClassifier as knn

df = pd.read_csv("iris.csv", header=0, index_col=None)

x = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=100)

model = knn(n_neighbors=3)
model.fit(x_train, y_train)


prediction = model.predict(x_test)

print(classification_report(y_test,prediction))
print(confusion_matrix(y_test,prediction))
print(accuracy_score(y_test,prediction))




import csv
a=[]
with open('enjoysport.csv') as csfile:
    reader = csv.reader(csfile)
    for row in reader:
        a.append(row)
        print(row)
num_attributes=len (a[0])-1
print(num_attributes)
print("The most specific hypothesis:",["0"]*num_attributes)
print("The most generic hypothesis:",["?"]*num_attributes)
hypothesis=a[1][:-1]
print(hypothesis)
print("\n Find S: Finding a maximally specific hypothesis")
for i in range (len(a)):
    if a[i][num_attributes]=="Yes":
        for j in range(num_attributes):
            if a[i][j]!=hypothesis[j]:
                hypothesis[j]='?'
    print("The training example no:",i+1,"the hypothesis is :",hypothesis)
print("\n The maximally specific hypothesis for training set is")
print(hypothesis)
